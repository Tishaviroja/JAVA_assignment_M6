
//Implement thread synchronization using synchronized blocks or methods.

package com.assignment;
class SharedResource {
    private int count = 0;

    // Synchronized method to ensure thread-safe increment
    public synchronized void increment() {
        count++;
        System.out.println(Thread.currentThread().getName() + " - Count: " + count);
    }

    public int getCount() {
        return count;
    }
}

// Thread Class
class MyThread extends Thread {
    private SharedResource resource;

    public MyThread(SharedResource resource, String name) {
        super(name);
        this.resource = resource;
    }

    @Override
    public void run() {
        for (int i = 0; i < 5; i++) {
            resource.increment();
            try {
                Thread.sleep(200); // Simulate processing delay
            } catch (InterruptedException e) {
                System.out.println(Thread.currentThread().getName() + " interrupted.");
            }
        }
    }
}

public class Syncronaization 
{
	public static void main(String[] args) {
        SharedResource resource = new SharedResource();

        // Creating multiple threads sharing the same resource
        MyThread thread1 = new MyThread(resource, "Thread 1");
        MyThread thread2 = new MyThread(resource, "Thread 2");

        thread1.start();
        thread2.start();

        try {
            thread1.join();
            thread2.join();
        } catch (InterruptedException e) {
            System.out.println("Main thread interrupted.");
        }

        System.out.println("Final Count: " + resource.getCount());
    }

}
